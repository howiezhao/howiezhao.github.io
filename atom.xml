<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Howie&#39;s Notes</title>
  
  <subtitle>Machine Learning and Cyber Security</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://howiezhao.github.io/"/>
  <updated>2018-09-28T05:42:30.842Z</updated>
  <id>https://howiezhao.github.io/</id>
  
  <author>
    <name>Howie Zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>盘点那些互联网公司的学生优惠</title>
    <link href="https://howiezhao.github.io/2018/09/26/it-student-discount/"/>
    <id>https://howiezhao.github.io/2018/09/26/it-student-discount/</id>
    <published>2018-09-26T14:33:32.000Z</published>
    <updated>2018-09-28T05:42:30.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JetBrains"><a href="#JetBrains" class="headerlink" title="JetBrains"></a><a href="https://www.jetbrains.com/" target="_blank" rel="noopener">JetBrains</a></h2><p>JetBrains是捷克的一家软件公司，该公司专业生产各种编程语言的IDE，其中包括Java的IDE —— <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">Intellij IDEA</a>，Python的IDE —— <a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">PyCharm</a>，JavaScript的IDE —— <a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">WebStorm</a>，C/C++的IDE —— <a href="https://www.jetbrains.com/clion/" target="_blank" rel="noopener">CLion</a>等等。JetBrains系列的IDE一直以强大易用著称，甚至有人说，一个优秀的程序员应该使用JetBrains全家桶。<br>JetBrains的大多数IDE都是收费的，有的分为社区版（Community Edition）和专业版（Professional Edition）两种，专业版相比社区版有更多的功能，但也会收取相应的费用，然而，JetBrains对学生提供<a href="https://www.jetbrains.com/zh/student/" target="_blank" rel="noopener">免费授权计划</a>，学生只要验证学生身份即可免费使用JetBrains的所有IDE。<br><a id="more"></a></p><h2 id="Microsoft-Imagine"><a href="#Microsoft-Imagine" class="headerlink" title="Microsoft Imagine"></a><a href="https://imagine.microsoft.com/zh-CN" target="_blank" rel="noopener">Microsoft Imagine</a></h2><p>Microsoft Imagine原名为DreamSpark，是微软为学生提供的一个资源集合，它包括了一些<a href="https://imagine.microsoft.com/zh-cn/catalog" target="_blank" rel="noopener">软件和服务</a>，学生只要验证学生身份即可使用其中的工具。<br>个人认为，Imagine相比之前的DreamSpark，为学生提供的免费资源少了许多。具体而言，它提供如下资源：</p><ul><li>Parallels Desktop for Mac Pro Edition：macOS上最好的虚拟机产品，提供免费试用3个月</li><li>Visual Studio Community 2017：原本就是免费的</li><li>面向学生的 Microsoft Azure 入门版</li><li>Microsoft虚拟学院课程：原本就是免费的</li><li>Pluralsight</li><li>SQL Server 2017 Developer Edition</li><li>Visual Studio Code：微软推出的编辑器，原本就是开源免费的</li><li>Visual Studio for Mac：原本就是免费的</li><li>Windows Embedded 8.1 Industry Pro Update</li><li>Windows Server 2016</li><li>Windows应用商店免费开发人员帐户</li><li>WintellectNow</li><li>Xamarin Studio Community Edition：原本就是免费的</li><li>Visual Studio的PHP Tools插件</li></ul><h2 id="GitHub-Student-Developer-Pack"><a href="#GitHub-Student-Developer-Pack" class="headerlink" title="GitHub Student Developer Pack"></a><a href="https://education.github.com/pack" target="_blank" rel="noopener">GitHub Student Developer Pack</a></h2><p>GitHub学生开发者包（GitHub Student Developer Pack）是GitHub与其他公司一起创建的，旨在让学生从一个地方免费访问最好的开发者工具，这样他们就可以边做边学。其中包括的工具有：</p><ul><li>Algolia</li><li>Atom：GitHub推出的编辑器，原本就是开源免费的</li><li>AWS</li><li>Bitnami</li><li>CARTO</li><li>CrowdFlower</li><li>Datadog</li><li>DigitalOcean：美国一家VPS提供商，提供50美元优惠劵</li><li>Flatiron School</li><li>GitHub无限制的私人仓库</li><li>Gitkraken：跨平台的Git GUI客户端，提供免费一年的专业帐户</li><li>HackHands</li><li>Heroku：美国的一家PaaS厂商，提供一个长达2年的Hobby类型Dyno，Dyno是Heroku上所有应用程序的基本运行环境，Hobby类型的Dyno比免费的要稍微好一些，详细配置信息请参考<a href="https://devcenter.heroku.com/articles/dyno-types" target="_blank" rel="noopener">官方文档</a></li><li>JetBrains系列IDE</li><li>Namecheap：美国的一家域名注册商，提供免费一年SSL证书、一年.me后缀域名优惠</li><li>SendGrid</li><li>Sentry</li><li>Stripe</li><li>Taplytics</li><li>Thinkful</li><li>Transifex</li><li>Travis CI</li><li>Unreal Engine</li></ul><p>学生只要验证学生身份就可以使用GitHub学生开发者包中提供的工具。</p><h2 id="阿里云云翼计划"><a href="#阿里云云翼计划" class="headerlink" title="阿里云云翼计划"></a><a href="https://promotion.aliyun.com/ntms/act/campus2018.html" target="_blank" rel="noopener">阿里云云翼计划</a></h2><p>学生验证学生身份后，每月仅需9.9元即可租用一台阿里云服务器。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JetBrains&quot;&gt;&lt;a href=&quot;#JetBrains&quot; class=&quot;headerlink&quot; title=&quot;JetBrains&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.jetbrains.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JetBrains&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;JetBrains是捷克的一家软件公司，该公司专业生产各种编程语言的IDE，其中包括Java的IDE —— &lt;a href=&quot;https://www.jetbrains.com/idea/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Intellij IDEA&lt;/a&gt;，Python的IDE —— &lt;a href=&quot;https://www.jetbrains.com/pycharm/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PyCharm&lt;/a&gt;，JavaScript的IDE —— &lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WebStorm&lt;/a&gt;，C/C++的IDE —— &lt;a href=&quot;https://www.jetbrains.com/clion/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CLion&lt;/a&gt;等等。JetBrains系列的IDE一直以强大易用著称，甚至有人说，一个优秀的程序员应该使用JetBrains全家桶。&lt;br&gt;JetBrains的大多数IDE都是收费的，有的分为社区版（Community Edition）和专业版（Professional Edition）两种，专业版相比社区版有更多的功能，但也会收取相应的费用，然而，JetBrains对学生提供&lt;a href=&quot;https://www.jetbrains.com/zh/student/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;免费授权计划&lt;/a&gt;，学生只要验证学生身份即可免费使用JetBrains的所有IDE。&lt;br&gt;
    
    </summary>
    
      <category term="CheatSheet" scheme="https://howiezhao.github.io/categories/CheatSheet/"/>
    
    
  </entry>
  
  <entry>
    <title>Jupyter Notebook常用扩展</title>
    <link href="https://howiezhao.github.io/2018/09/25/jupyter-notebook-extensions/"/>
    <id>https://howiezhao.github.io/2018/09/25/jupyter-notebook-extensions/</id>
    <published>2018-09-25T09:01:20.000Z</published>
    <updated>2018-09-26T14:44:13.449Z</updated>
    
    <content type="html"><![CDATA[<h2 id="扩展机制"><a href="#扩展机制" class="headerlink" title="扩展机制"></a>扩展机制</h2><p>在介绍常用扩展之前，有必要先来介绍一下</p><h2 id="jupyter-contrib-nbextensions"><a href="#jupyter-contrib-nbextensions" class="headerlink" title="jupyter_contrib_nbextensions"></a><a href="https://github.com/ipython-contrib/jupyter_contrib_nbextensions" target="_blank" rel="noopener">jupyter_contrib_nbextensions</a></h2><p>与其说这是一个插件，倒不如说这是一群插件，该插件集合了大多数的Jupyter Notebook常用扩展。<br>使用<code>pip install jupyter_contrib_nbextensions</code>命令即可安装，安装完成后使用<code>jupyter contrib nbextension install --user</code>命令进行些许配置，参数<code>--user</code>指定安装到当前用户家目录下的<code>.jupyter</code>文件夹下。<br>等到安装并配置完成后，打开Jupyter Notebook网页，会出现<code>Nbextensions</code>选项卡，点击进入此选项卡中，可以启用或禁用相应的插件。</p><p>## </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;扩展机制&quot;&gt;&lt;a href=&quot;#扩展机制&quot; class=&quot;headerlink&quot; title=&quot;扩展机制&quot;&gt;&lt;/a&gt;扩展机制&lt;/h2&gt;&lt;p&gt;在介绍常用扩展之前，有必要先来介绍一下&lt;/p&gt;
&lt;h2 id=&quot;jupyter-contrib-nbextensions&quot;&gt;
      
    
    </summary>
    
      <category term="CheatSheet" scheme="https://howiezhao.github.io/categories/CheatSheet/"/>
    
    
  </entry>
  
  <entry>
    <title>editorconfig 是什么</title>
    <link href="https://howiezhao.github.io/2018/09/23/what-is-editorconfig/"/>
    <id>https://howiezhao.github.io/2018/09/23/what-is-editorconfig/</id>
    <published>2018-09-23T09:55:34.000Z</published>
    <updated>2018-09-23T10:56:54.074Z</updated>
    
    <content type="html"><![CDATA[<p>开发同一项目的不同的人，可能会使用不同的编辑器，又会有不同的设置，这就会造成不同的代码格式，为了统一同一项目的代码格式，由此诞生了<a href="https://editorconfig.org/" target="_blank" rel="noopener">EditorConfig</a>，它包含了<strong>一个用于定义代码格式的文件</strong>和<strong>一批编辑器插件</strong>，这些插件可以让编辑器读取配置文件并依此格式化代码。<br>一个典型的 EditorConfig 配置文件如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 这是一行注释，以#开头</span><br><span class="line"></span><br><span class="line"># 表示此文件为最顶级</span><br><span class="line">root = true</span><br><span class="line"></span><br><span class="line"># 设定每个文件每行以换行（LF）结束，文件末尾添加一个新行</span><br><span class="line">[*]</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = true</span><br><span class="line"></span><br><span class="line"># 匹配所有以 js 和 py 为后缀名的文件</span><br><span class="line"># 设定其编码为 UTF-8</span><br><span class="line">[*.&#123;js,py&#125;]</span><br><span class="line">charset = utf-8</span><br><span class="line"></span><br><span class="line"># 匹配所有以 py 为后缀名的文件，设定其缩进为 4 个空格</span><br><span class="line">[*.py]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 4</span><br><span class="line"></span><br><span class="line"># 设定 Makefile 文件的缩进为 Tab</span><br><span class="line">[Makefile]</span><br><span class="line">indent_style = tab</span><br><span class="line"></span><br><span class="line"># 匹配lib目录下所有以 js 为后缀名的文件，设定其缩进为 2 个空格</span><br><span class="line">[lib/**.js]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line"></span><br><span class="line"># 设定 package.json 和 .travis.yml 的缩进为 2 个空格</span><br><span class="line">[&#123;package.json,.travis.yml&#125;]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br></pre></td></tr></table></figure></p><p>此配置文件应该保存为<code>.editorconfig</code>并放置在项目目录中，编辑器的 EditorConfig 插件会从文件打开目录开始依次向其父级目录查找并读取配置文件，直到遇见<code>root = true</code>为止。<br>有很多项目在初始化时都会生成相应的<code>.editorconfig</code>文件，比如 Angular。<br>另外，Visual Studio 和 JetBrains 家的大部分 IDE 都已经原生支持了 EditorConfig，因此不用再安装插件；对于 Sublime Text 和 Vim 等未原生支持的编辑器，EditorConfig 官网提供了相应的插件下载地址。要了解详细的支持列表，请访问 EditorConfig 官网。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开发同一项目的不同的人，可能会使用不同的编辑器，又会有不同的设置，这就会造成不同的代码格式，为了统一同一项目的代码格式，由此诞生了&lt;a href=&quot;https://editorconfig.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Edito
      
    
    </summary>
    
      <category term="CheatSheet" scheme="https://howiezhao.github.io/categories/CheatSheet/"/>
    
    
  </entry>
  
  <entry>
    <title>写代码应该用哪种字体</title>
    <link href="https://howiezhao.github.io/2018/09/23/code-font/"/>
    <id>https://howiezhao.github.io/2018/09/23/code-font/</id>
    <published>2018-09-23T09:52:35.000Z</published>
    <updated>2018-09-24T04:34:46.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="等宽字体与比例字体"><a href="#等宽字体与比例字体" class="headerlink" title="等宽字体与比例字体"></a>等宽字体与比例字体</h2><p>等宽字体（Monospaced）是指字符宽度相同的电脑字体，与此相对，字符宽度不尽相同的电脑字体称为比例字体（Proportional）。一图胜千言，如下：<br><img src="/images/monospaced.PNG" alt="等宽字体与比例字体">在早期的电脑中，由于技术的局限，无法进行字母宽度的比例调整，因此只能将每个字符都制作成一样的宽度，从而形成了等宽字体。在等宽字体中，字母 i，j 显得两侧余白较多，而字母 w，m 等的笔画显得相当拥挤。但是随着图形用户界面主流的更新和计算机技术的提高，处理比例字体的局限性得到了突破，因此现在排版上显得比较自然的比例字体的使用已经相当普及。这里所讨论的都是英文字体，对于中文字体而言，一般认为它们都是等宽的。<br>Windows 中常用的等宽字体为 <strong>Consolas</strong>；macOS 中常用的等宽字体为 <strong>Menlo</strong>；Linux 中常用的等宽字体为 <strong>Mono</strong>。<br><a id="more"></a></p><h2 id="衬线字体与非衬线字体"><a href="#衬线字体与非衬线字体" class="headerlink" title="衬线字体与非衬线字体"></a>衬线字体与非衬线字体</h2><p>顾名思义，衬线体（Serif）和无衬线体（Sans-Serif）的区别就在于有无<strong>衬线</strong>，而衬线则指的是字形笔画末端的装饰细节部分。一图胜千言，如下：<br><img src="/images/serif.PNG" alt="衬线字体与非衬线字体">这里所讨论的都是英文字体，对于简体中文字体而言，习惯性称衬线字体为<strong>宋体</strong>，非衬线字体为<strong>黑体</strong>，如下：<br><img src="/images/song-hei.png" alt="宋体与黑体">衬线字体常用于印刷业，而且特别适用于长篇文章段落；非衬线字体简洁大方，适用于广告、标志、牌子等短句。另外，系统、程序和网页中的字体也几乎都是非衬线字体，即使是很长的段落，这是因为显示器分辨率低，字体不能减小，如果用衬线字体，那些边边角角就很难用像素显示清楚，结果反而不利于阅读。<br>Google 在 2015 年就将其原本的衬线体 Logo 换成了无衬线体 Logo:<br><img src="/images/google.gif" alt="Google Logo 变化">我们在写 Word 文档时，常用的英文衬线字体就是 <strong>Times New Roman</strong>；而在做 PPT 时，个人倾向于使用非衬线字体<strong>微软雅黑</strong>。</p><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><p>写代码应该使用的字体对于衬线或非衬线要求不大，但强烈建议使用等宽字体，这样可以便于代码对齐，因为比例字体的宽度不定，这会对代码对齐造成极大的困难。另外，还应该对特殊字符有较高的辨识度，比如 I（大写i）、l（小写L）、1（数字1），0（数字0）、O（大写o） 等。<br>基于以上，个人倾向于使用 Consolas，它是 Windows 中自带的一款等宽、非衬线字体。</p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>在下载别的字体时，可能会遇到相关术语，如下：</p><ul><li>sans：无衬线体</li><li>gothic：哥特体，即无衬线体</li><li>mono：等宽字体</li><li>bold：粗体</li><li>italic：斜体</li><li>bolditalic：加粗斜体</li><li>regular：常规体</li><li>sc：即 Simplified Chinese，简体中文</li><li>ts：即 Traditional Chinese，繁体中文</li></ul><h2 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h2><p>关于代码配色，就真是个“仁者见仁，智者见智”的问题了，个人要求满足以下两点：</p><ol><li>采用黑色背景</li><li>官网提供多种编辑器的支持</li></ol><p>综上，个人倾向于使用<a href="https://draculatheme.com/" target="_blank" rel="noopener">Dracula</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;等宽字体与比例字体&quot;&gt;&lt;a href=&quot;#等宽字体与比例字体&quot; class=&quot;headerlink&quot; title=&quot;等宽字体与比例字体&quot;&gt;&lt;/a&gt;等宽字体与比例字体&lt;/h2&gt;&lt;p&gt;等宽字体（Monospaced）是指字符宽度相同的电脑字体，与此相对，字符宽度不尽相同的电脑字体称为比例字体（Proportional）。一图胜千言，如下：&lt;br&gt;&lt;img src=&quot;/images/monospaced.PNG&quot; alt=&quot;等宽字体与比例字体&quot;&gt;在早期的电脑中，由于技术的局限，无法进行字母宽度的比例调整，因此只能将每个字符都制作成一样的宽度，从而形成了等宽字体。在等宽字体中，字母 i，j 显得两侧余白较多，而字母 w，m 等的笔画显得相当拥挤。但是随着图形用户界面主流的更新和计算机技术的提高，处理比例字体的局限性得到了突破，因此现在排版上显得比较自然的比例字体的使用已经相当普及。这里所讨论的都是英文字体，对于中文字体而言，一般认为它们都是等宽的。&lt;br&gt;Windows 中常用的等宽字体为 &lt;strong&gt;Consolas&lt;/strong&gt;；macOS 中常用的等宽字体为 &lt;strong&gt;Menlo&lt;/strong&gt;；Linux 中常用的等宽字体为 &lt;strong&gt;Mono&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="CheatSheet" scheme="https://howiezhao.github.io/categories/CheatSheet/"/>
    
    
  </entry>
  
  <entry>
    <title>开发环境代表什么</title>
    <link href="https://howiezhao.github.io/2018/09/23/what-is-development-environment/"/>
    <id>https://howiezhao.github.io/2018/09/23/what-is-development-environment/</id>
    <published>2018-09-23T09:41:59.000Z</published>
    <updated>2018-09-24T05:40:11.478Z</updated>
    
    <content type="html"><![CDATA[<p>按照编程语言的执行原理，一般将其分为<strong>编译型语言</strong>（如 C）和<strong>解释型语言</strong>（如 Python），对于编译型语言来说，它的开发环境就代表该语言的<strong>编译器</strong>和其<strong>基本类库</strong>，对于解释型语言来说，它的开发环境就代表该语言的<strong>解释器</strong>和其<strong>基本类库</strong>。请注意，这里我并没有提到<strong>编辑器</strong>，因为编辑器并不属于每种语言所特有的范畴。<br>对于解释型语言来说，它的开发环境就等于运行环境，而对于编译型语言，可以说它不需要运行环境。请注意，Java 可以理解为是一种<strong>先编译后解释</strong>的语言，所以运行 Java 程序之前需要安装 JRE（Java 运行环境）。<br>如今许多语言的 IDE（集成开发环境），已经集编辑器、该语言的编译器/解释器、基本类库等于一体。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;按照编程语言的执行原理，一般将其分为&lt;strong&gt;编译型语言&lt;/strong&gt;（如 C）和&lt;strong&gt;解释型语言&lt;/strong&gt;（如 Python），对于编译型语言来说，它的开发环境就代表该语言的&lt;strong&gt;编译器&lt;/strong&gt;和其&lt;strong&gt;基本类库&lt;
      
    
    </summary>
    
      <category term="CheatSheet" scheme="https://howiezhao.github.io/categories/CheatSheet/"/>
    
    
  </entry>
  
  <entry>
    <title>谈谈SEO</title>
    <link href="https://howiezhao.github.io/2018/09/23/talk-about-seo/"/>
    <id>https://howiezhao.github.io/2018/09/23/talk-about-seo/</id>
    <published>2018-09-23T04:34:47.000Z</published>
    <updated>2018-09-23T09:42:52.739Z</updated>
    
    <content type="html"><![CDATA[<p>SEO，即搜索引擎优化(Search Engine Optimization)，下面列出几点SEO方面的建议：</p><ul><li>页面的URL应该足够反映页面的内容</li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SEO，即搜索引擎优化(Search Engine Optimization)，下面列出几点SEO方面的建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;页面的URL应该足够反映页面的内容&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
      <category term="CheatSheet" scheme="https://howiezhao.github.io/categories/CheatSheet/"/>
    
    
      <category term="Web" scheme="https://howiezhao.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>隐写术</title>
    <link href="https://howiezhao.github.io/2018/09/22/steganography/"/>
    <id>https://howiezhao.github.io/2018/09/22/steganography/</id>
    <published>2018-09-22T15:45:31.000Z</published>
    <updated>2018-09-24T12:20:34.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>拿到一个被隐写的文件，第一步当然是判断该文件是哪种类型的文件，一般可以通过文件后缀名判断之，若不能通过文件后缀名判断，则可以使用 Linux 中的 <code>file</code> 命令，直接输入 <code>file a</code>即可检查 a 文件的类型。<br>知道文件类型后，就可以对症下药，依据相应的类型使用相应的办法，此时，不妨再查看一下文件对应的二进制数据，所有电子信息的本质无非是二进制，可以在二进制数据中搜索<code>CTF</code>或<code>FLAG</code>等关键字，发现是否存在隐藏信息。Windows下可以使用Sublime Text 3 的插件<a href="http://facelessuser.github.io/HexViewer/" target="_blank" rel="noopener">HexViewer</a>查看二进制信息。Linux 下可以使用 <code>xxd</code> 命令查看文件二进制数据。</p><h2 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h2><h3 id="图片内容"><a href="#图片内容" class="headerlink" title="图片内容"></a>图片内容</h3><p>首先应该检查图片内容本身是否存在某些隐藏信息，遇到不熟悉的图片可以尝试<a href="https://www.google.com/imghp" target="_blank" rel="noopener">谷歌搜图</a>，或许可以发现更多信息。</p><h3 id="Exif"><a href="#Exif" class="headerlink" title="Exif"></a>Exif</h3><p>Exif，即可交换图像文件格式(Exchangeable image file format)，可以记录JPEG格式图片的属性信息和拍摄数据。有的JPEG格式图片会具有Exif信息，在Windows中查看属性选项卡中的详细信息项即可查看。别的格式的图片不具备Exif信息。如下图片：<br><img src="/images/meinv.jpg" alt="exif"><br><a id="more"></a></p><h3 id="JPEG"><a href="#JPEG" class="headerlink" title="JPEG"></a>JPEG</h3><h3 id="PNG"><a href="#PNG" class="headerlink" title="PNG"></a>PNG</h3><h3 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h3><h3 id="BMP"><a href="#BMP" class="headerlink" title="BMP"></a>BMP</h3><h2 id="音频隐写"><a href="#音频隐写" class="headerlink" title="音频隐写"></a>音频隐写</h2><p>音频隐写一般会用到<a href="http://www.petitcolas.net/steganography/mp3stego/" target="_blank" rel="noopener">MP3stego</a>，该软件会将信息编码到 MP3 文件中，同时也可以从被隐写的 MP3 文件中解码所需信息。下载该软件后在其<code>MP3Stego</code>文件夹下会有 2 个命令：<code>Encode</code>和<code>Decode</code>，<code>Encode</code>命令用于隐写信息，<code>Decode</code>命令用于解密被隐写的信息，使用<code>decode -X -P pass svega_stego.mp3</code>即可从<code>svega_stego.mp3</code>文件中解码所需信息，<code>-P</code>指定解密密码。</p><h2 id="视频隐写"><a href="#视频隐写" class="headerlink" title="视频隐写"></a>视频隐写</h2><h2 id="其他隐写"><a href="#其他隐写" class="headerlink" title="其他隐写"></a>其他隐写</h2><h3 id="Word-文档"><a href="#Word-文档" class="headerlink" title="Word 文档"></a>Word 文档</h3><p>Word 文档可能会隐藏某些信息，遇到 <code>doc</code> 文档可以尝试在 <code>Word 选项</code>中选择<code>显示</code>并打开<code>隐藏文字</code>选项。如下所示：<br><img src="/images/word.PNG" alt="word"><br>像 Word 文档或 Excel 表格这样的富文本文件，可以直接解压之，查看其中是否包含某些特殊文件。<br>类似的题可以参考<a href="http://www.shiyanbar.com/ctf/1927" target="_blank" rel="noopener">Fonts</a>,<a href="http://www.shiyanbar.com/ctf/1849" target="_blank" rel="noopener">认真你就输了</a>等等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一步&quot;&gt;&lt;a href=&quot;#第一步&quot; class=&quot;headerlink&quot; title=&quot;第一步&quot;&gt;&lt;/a&gt;第一步&lt;/h2&gt;&lt;p&gt;拿到一个被隐写的文件，第一步当然是判断该文件是哪种类型的文件，一般可以通过文件后缀名判断之，若不能通过文件后缀名判断，则可以使用 Linux 中的 &lt;code&gt;file&lt;/code&gt; 命令，直接输入 &lt;code&gt;file a&lt;/code&gt;即可检查 a 文件的类型。&lt;br&gt;知道文件类型后，就可以对症下药，依据相应的类型使用相应的办法，此时，不妨再查看一下文件对应的二进制数据，所有电子信息的本质无非是二进制，可以在二进制数据中搜索&lt;code&gt;CTF&lt;/code&gt;或&lt;code&gt;FLAG&lt;/code&gt;等关键字，发现是否存在隐藏信息。Windows下可以使用Sublime Text 3 的插件&lt;a href=&quot;http://facelessuser.github.io/HexViewer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HexViewer&lt;/a&gt;查看二进制信息。Linux 下可以使用 &lt;code&gt;xxd&lt;/code&gt; 命令查看文件二进制数据。&lt;/p&gt;
&lt;h2 id=&quot;图片隐写&quot;&gt;&lt;a href=&quot;#图片隐写&quot; class=&quot;headerlink&quot; title=&quot;图片隐写&quot;&gt;&lt;/a&gt;图片隐写&lt;/h2&gt;&lt;h3 id=&quot;图片内容&quot;&gt;&lt;a href=&quot;#图片内容&quot; class=&quot;headerlink&quot; title=&quot;图片内容&quot;&gt;&lt;/a&gt;图片内容&lt;/h3&gt;&lt;p&gt;首先应该检查图片内容本身是否存在某些隐藏信息，遇到不熟悉的图片可以尝试&lt;a href=&quot;https://www.google.com/imghp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;谷歌搜图&lt;/a&gt;，或许可以发现更多信息。&lt;/p&gt;
&lt;h3 id=&quot;Exif&quot;&gt;&lt;a href=&quot;#Exif&quot; class=&quot;headerlink&quot; title=&quot;Exif&quot;&gt;&lt;/a&gt;Exif&lt;/h3&gt;&lt;p&gt;Exif，即可交换图像文件格式(Exchangeable image file format)，可以记录JPEG格式图片的属性信息和拍摄数据。有的JPEG格式图片会具有Exif信息，在Windows中查看属性选项卡中的详细信息项即可查看。别的格式的图片不具备Exif信息。如下图片：&lt;br&gt;&lt;img src=&quot;/images/meinv.jpg&quot; alt=&quot;exif&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CheatSheet" scheme="https://howiezhao.github.io/categories/CheatSheet/"/>
    
    
      <category term="CTF" scheme="https://howiezhao.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>微软平台技术简介</title>
    <link href="https://howiezhao.github.io/2018/09/22/microsoft-technology/"/>
    <id>https://howiezhao.github.io/2018/09/22/microsoft-technology/</id>
    <published>2018-09-22T12:30:09.000Z</published>
    <updated>2018-09-22T16:13:05.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>微软最初的操作系统的DOS，DOS只是一个命令行形式，后来</p><h2 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h2><h2 id="Windows-Phone"><a href="#Windows-Phone" class="headerlink" title="Windows Phone"></a>Windows Phone</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Windows&quot;&gt;&lt;a href=&quot;#Windows&quot; class=&quot;headerlink&quot; title=&quot;Windows&quot;&gt;&lt;/a&gt;Windows&lt;/h2&gt;&lt;p&gt;微软最初的操作系统的DOS，DOS只是一个命令行形式，后来&lt;/p&gt;
&lt;h2 id=&quot;NET&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="CheatSheet" scheme="https://howiezhao.github.io/categories/CheatSheet/"/>
    
    
  </entry>
  
  <entry>
    <title>网站统计与分析</title>
    <link href="https://howiezhao.github.io/2018/09/22/web-analytics/"/>
    <id>https://howiezhao.github.io/2018/09/22/web-analytics/</id>
    <published>2018-09-22T09:59:29.000Z</published>
    <updated>2018-09-22T11:02:32.435Z</updated>
    
    <content type="html"><![CDATA[<h2 id="几个术语"><a href="#几个术语" class="headerlink" title="几个术语"></a>几个术语</h2><ul><li>PV：Page View，即页面浏览量或点击量，用户每次刷新即被计算一次。</li><li>UV：Unique Visitor，指独立访客数，以cookie为依据，访问网站的一台电脑客户端为一个访客。一天内相同的客户端只会被计算一次。</li><li>IP：指独立IP数。一天内相同IP地址只被计算一次。</li></ul><h2 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h2><p>有许多第三方的工具可以帮助站长统计和分析网站流量，比如<a href="https://tongji.baidu.com" target="_blank" rel="noopener">百度统计</a>、<a href="http://ta.qq.com/" target="_blank" rel="noopener">腾讯分析</a>、<a href="https://analytics.google.com/analytics/web" target="_blank" rel="noopener">Google Analytics(GA)</a>等。个人经常使用Google Analytics。<br>这类工具的原理大致为：它们会生成一段特定的JS代码，站长需要将这段代码插入到自己网站的页面中，当访客访问网站时，这段代码会收集访客的行为信息，并上传到它们的服务器上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;几个术语&quot;&gt;&lt;a href=&quot;#几个术语&quot; class=&quot;headerlink&quot; title=&quot;几个术语&quot;&gt;&lt;/a&gt;几个术语&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;PV：Page View，即页面浏览量或点击量，用户每次刷新即被计算一次。&lt;/li&gt;
&lt;li&gt;UV：Unique
      
    
    </summary>
    
      <category term="CheatSheet" scheme="https://howiezhao.github.io/categories/CheatSheet/"/>
    
    
      <category term="Web" scheme="https://howiezhao.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>版本号的意义</title>
    <link href="https://howiezhao.github.io/2018/09/21/version-number/"/>
    <id>https://howiezhao.github.io/2018/09/21/version-number/</id>
    <published>2018-09-21T12:51:08.000Z</published>
    <updated>2018-09-22T09:54:42.867Z</updated>
    
    <content type="html"><![CDATA[<p>软件版本号的确定没有一个统一的规范，但大都遵循一个固定的格式，即<code>X.Y.Z</code>格式，其中：</p><ul><li>X代表<strong>主版本号</strong>，一般当软件整体重写，或出现不向后兼容的改变等重大更新时，增加X，同时重置Y、Z为0，X为0时表示软件还在开发阶段；</li><li>Y代表<strong>次版本号</strong>，增删功能时增加Y，同时重置Z为0；</li><li>Z代表<strong>修订号</strong>，修复Bug时增加Z。</li></ul><p>除此之外，还会有一些修饰词，比如：</p><ul><li><code>alpha</code>表示内部测试版；</li><li><code>beta</code>表示公开测试版；</li><li><code>rc</code>即Release Candidate，表示候选版本，即将作为正式版发布；</li><li><code>release</code>表示正式发行版；</li><li><code>lts</code>即Long Term Support，表示长期支持版。</li></ul><p>有的项目有自己的一套规则，比如Ubuntu、Visual Studio等，它们采用发布年份作为版本号；Node.js规定X为偶数的是稳定版，X为奇数的是开发版；TeX的版本号不断趋近于π。<br>随着版本号定义的越来越混乱，GitHub起草了一个<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener">语义化版本(Semantic Versioning)</a>规范，为开源项目做出了一定指导意义。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;软件版本号的确定没有一个统一的规范，但大都遵循一个固定的格式，即&lt;code&gt;X.Y.Z&lt;/code&gt;格式，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X代表&lt;strong&gt;主版本号&lt;/strong&gt;，一般当软件整体重写，或出现不向后兼容的改变等重大更新时，增加X，同时重置Y、Z为0，
      
    
    </summary>
    
      <category term="CheatSheet" scheme="https://howiezhao.github.io/categories/CheatSheet/"/>
    
    
  </entry>
  
  <entry>
    <title>top的增强版：htop</title>
    <link href="https://howiezhao.github.io/2018/09/19/htop-top/"/>
    <id>https://howiezhao.github.io/2018/09/19/htop-top/</id>
    <published>2018-09-19T09:50:14.000Z</published>
    <updated>2018-09-19T12:39:04.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p>top是Linux下一个常用命令，用来监视系统的运行状况，类似于Windows的任务管理器，下图是<code>top</code>命令的运行界面：<br><img src="/images/top.PNG" alt="top">top的运行结果可以大致分为7个部分：</p><ul><li>第1行显示了<strong>系统</strong>概况</li><li>第2行显示了<strong>进程</strong>概况</li><li>第3行显示了<strong>CPU</strong>概况</li><li>第4行显示了<strong>内存</strong>概况</li><li>第5行显示了<strong>Swap分区</strong>概况</li><li>第6行为空行，用以显示运行命令时输入的<strong>参数</strong></li><li>剩下部分则为<strong>每个进程的详细信息</strong><a id="more"></a><h3 id="第1行"><a href="#第1行" class="headerlink" title="第1行"></a>第1行</h3></li></ul><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>top -</td><td>系统概况</td></tr><tr><td>18:37:24</td><td>当前系统时间</td></tr><tr><td>up 130 days, 6:22,</td><td>系统已运行时间</td></tr><tr><td>1 user,</td><td>当前登录用户数</td></tr><tr><td>load average: 0.02, 0.04, 0.00</td><td>系统平均负载，三个数值分别为1分钟、5分钟、15分钟前到现在的平均值。</td></tr></tbody></table><h3 id="第2行"><a href="#第2行" class="headerlink" title="第2行"></a>第2行</h3><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>Tasks:</td><td>进程(任务)概况</td></tr><tr><td>23 total,</td><td>总进程数</td></tr><tr><td>1 running,</td><td>运行的进程数</td></tr><tr><td>22 sleeping,</td><td>睡眠的进程数</td></tr><tr><td>0 stopped,</td><td>停止的进程数</td></tr><tr><td>0 zombie</td><td>僵尸进程数</td></tr></tbody></table><h3 id="第3行"><a href="#第3行" class="headerlink" title="第3行"></a>第3行</h3><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>Cpu(s):</td><td>CPU概况</td></tr><tr><td>3.7%us,</td><td>用户(user)进程占用CPU百分率</td></tr><tr><td>0.7%sy,</td><td>系统(system)进程占用CPU百分率</td></tr><tr><td>0.0%ni,</td><td>用户进程空间内改变过优先级(niced)的进程占用CPU百分比</td></tr><tr><td>95.7%id,</td><td>CPU空闲(idle)率</td></tr><tr><td>0.0%wa,</td><td>等待(wait)IO的CPU时间百分比</td></tr><tr><td>0.0%hi,</td><td>硬中断(hardware interrupt)占用CPU的百分比</td></tr><tr><td>0.0%si,</td><td>软中断(software interrupt)占用CPU的百分比</td></tr><tr><td>0.0%st</td><td></td></tr></tbody></table><h3 id="第4行"><a href="#第4行" class="headerlink" title="第4行"></a>第4行</h3><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>Mem:</td><td>内存(memory)概况，数值以kb为单位</td></tr><tr><td>524288k total,</td><td>内存总量</td></tr><tr><td>278140k used,</td><td>内存使用量</td></tr><tr><td>246148k free,</td><td>内存空闲量</td></tr><tr><td>0k buffers</td><td>缓冲的内存量</td></tr></tbody></table><h3 id="第5行"><a href="#第5行" class="headerlink" title="第5行"></a>第5行</h3><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>Swap:</td><td>Swap分区概况，数值以kb为单位</td></tr><tr><td>65536k total,</td><td>Swap分区总量</td></tr><tr><td>65536k used,</td><td>Swap分区使用量</td></tr><tr><td>0k free,</td><td>Swap分区空闲量</td></tr><tr><td>28800k cached</td><td>缓冲的Swap分区量</td></tr></tbody></table><h3 id="剩下部分"><a href="#剩下部分" class="headerlink" title="剩下部分"></a>剩下部分</h3><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>PID</td><td>进程号</td></tr><tr><td>USER</td><td>进程创建者</td></tr><tr><td>PR</td><td>进程优先级</td></tr><tr><td>NI</td><td>nice值。越小优先级越高，最小-20，最大20（用户设置最大19）</td></tr><tr><td>VIRT</td><td>进程使用的虚拟(virtual)内存总量，单位kb。VIRT=SWAP+RES</td></tr><tr><td>RES</td><td>进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</td></tr><tr><td>SHR</td><td>共享(share)内存大小，单位kb</td></tr><tr><td>S</td><td>进程状态。D=不可中断的睡眠状态，R=运行态，S=睡眠态，T=跟踪/停止态，Z=僵尸态</td></tr><tr><td>%CPU</td><td>进程占用CPU百分比</td></tr><tr><td>%MEM</td><td>进程占用内存百分比</td></tr><tr><td>TIME+</td><td>进程运行时间</td></tr><tr><td>COMMAND</td><td>运行进程时所使用的命令</td></tr></tbody></table><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>在<code>top</code>命令运行界面也可以输入相关命令，具体如下：</p><ul><li><code>q</code>：退出<code>top</code>运行界面</li><li><code>P</code>：以占据CPU百分比排序</li><li><code>M</code>：以占据内存百分比排序</li><li><code>T</code>：以累积占用CPU时间排序</li><li><code>s</code>：修改刷新时间间隔，默认每隔3秒刷新信息。按下s键，然后按下数字，即可修改刷新时间间隔为你输入的数字，单位为秒。例如：按下s键，在按数字1键，即可实现每秒刷新一次</li><li>回车或空格：手动立即刷新</li><li><code>k</code>：终止指定的进程。按下k键，再输入要杀死的进程的pid，再按回车键，选择信号类型，以数字标示，默认15为杀死，本步可省略直接按回车键（常用为-9）</li><li><code>h</code>：显示可输入的命令帮助菜单</li></ul><h2 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h2><p>htop是一款第三方的命令行工具，它可以被视为是top的增强版，在Ubuntu下可使用<code>apt install htop</code>命令安装，下图是<code>htop</code>命令的运行界面：<br><img src="/images/htop.PNG" alt="htop">当了解了<code>top</code>运行界面的各种参数的含义后，<code>htop</code>运行界面就变得不言而喻了，下面简要介绍一下可以在htop运行界面执行的相关命令：</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>综上所述，htop相比top有以下优势：</p><ul><li>彩色标识CPU、内存、Swap分区</li><li>CPU、内存、Swap分区使用情况直观易懂</li><li>底部有命令提示</li><li>支持方向键选择进程</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;top&quot;&gt;&lt;a href=&quot;#top&quot; class=&quot;headerlink&quot; title=&quot;top&quot;&gt;&lt;/a&gt;top&lt;/h2&gt;&lt;p&gt;top是Linux下一个常用命令，用来监视系统的运行状况，类似于Windows的任务管理器，下图是&lt;code&gt;top&lt;/code&gt;命令的运行界面：&lt;br&gt;&lt;img src=&quot;/images/top.PNG&quot; alt=&quot;top&quot;&gt;top的运行结果可以大致分为7个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1行显示了&lt;strong&gt;系统&lt;/strong&gt;概况&lt;/li&gt;
&lt;li&gt;第2行显示了&lt;strong&gt;进程&lt;/strong&gt;概况&lt;/li&gt;
&lt;li&gt;第3行显示了&lt;strong&gt;CPU&lt;/strong&gt;概况&lt;/li&gt;
&lt;li&gt;第4行显示了&lt;strong&gt;内存&lt;/strong&gt;概况&lt;/li&gt;
&lt;li&gt;第5行显示了&lt;strong&gt;Swap分区&lt;/strong&gt;概况&lt;/li&gt;
&lt;li&gt;第6行为空行，用以显示运行命令时输入的&lt;strong&gt;参数&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;剩下部分则为&lt;strong&gt;每个进程的详细信息&lt;/strong&gt;
    
    </summary>
    
      <category term="CheatSheet" scheme="https://howiezhao.github.io/categories/CheatSheet/"/>
    
    
      <category term="Linux" scheme="https://howiezhao.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>curl wget</title>
    <link href="https://howiezhao.github.io/2018/09/19/curl-wget/"/>
    <id>https://howiezhao.github.io/2018/09/19/curl-wget/</id>
    <published>2018-09-19T09:50:05.000Z</published>
    <updated>2018-09-19T09:50:05.128Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>terminal与shell</title>
    <link href="https://howiezhao.github.io/2018/09/19/terminal-shell/"/>
    <id>https://howiezhao.github.io/2018/09/19/terminal-shell/</id>
    <published>2018-09-19T09:00:22.000Z</published>
    <updated>2018-09-19T09:01:03.339Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="CheatSheet" scheme="https://howiezhao.github.io/categories/CheatSheet/"/>
    
    
      <category term="Linux" scheme="https://howiezhao.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>强大的autojump</title>
    <link href="https://howiezhao.github.io/2018/09/19/autojump/"/>
    <id>https://howiezhao.github.io/2018/09/19/autojump/</id>
    <published>2018-09-19T08:59:39.000Z</published>
    <updated>2018-09-19T09:01:34.957Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="CheatSheet" scheme="https://howiezhao.github.io/categories/CheatSheet/"/>
    
    
      <category term="Linux" scheme="https://howiezhao.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>那么，你想在安全行业工作吗？</title>
    <link href="https://howiezhao.github.io/2018/09/18/so-you-want-to-work-in-security/"/>
    <id>https://howiezhao.github.io/2018/09/18/so-you-want-to-work-in-security/</id>
    <published>2018-09-18T05:37:05.000Z</published>
    <updated>2018-09-18T10:00:22.151Z</updated>
    
    <content type="html"><![CDATA[<p>本文翻译自<a href="https://medium.freecodecamp.org/so-you-want-to-work-in-security-bc6c10157d23" target="_blank" rel="noopener">https://medium.freecodecamp.org/so-you-want-to-work-in-security-bc6c10157d23</a> ，正文如下：</p><p>每隔一段时间，我就会收到一封来自陌生人的电子邮件，询问有关如何从事安全行业（计算机，信息，网络等等）的建议。这很棒！我们需要更多充满激情，富有创造力和勤奋工作的人，他们希望努力使技术更安全。它也是一种非常经济稳定的谋生方式。关于这个确切的话题还有很多其他帖子，但我会根据自己的经验提出一些高层次的想法。<br><img src="https://cdn-images-1.medium.com/max/1000/1*Z7BjkasC8Kx5JtZ7N5Pe2A.gif" alt="不像电影"><br><a id="more"></a></p><h2 id="警告：这不像电影。"><a href="#警告：这不像电影。" class="headerlink" title="警告：这不像电影。"></a>警告：这不像电影。</h2><p>在安全方面工作并不像好莱坞所描绘的那样。我喜欢观看黑客风格的电影和节目，以获得幻想和逃避，但日常工作并不像在屏幕上看起来那样快速和性感（就我的经验来说）。<br>现在，对于大多数职业来说都是如此，即使我从未花费一天时间在地下巢穴中解读流媒体代码，我仍然认为这是一个令人兴奋，重要，具有挑战性和有益的领域。</p><h2 id="没有标准或完美的课程。"><a href="#没有标准或完美的课程。" class="headerlink" title="没有标准或完美的课程。"></a>没有标准或完美的课程。</h2><p>安全是一个广泛的，跨学科的应用领域。有设计和构建安全系统的人，尝试破坏系统的人，尝试检测入侵的人以及介于两者之间的大量事物。如果我学到了什么，我就知道没有单一的，标准的或最好的准备路径。也许这会随着领域的成熟而改变，但我对此表示怀疑。它也不像其他需要认证的专业领域（例如医学，法律），这既可以是解放也可以是恐吓。<br>独立于你如何获得它，你将受益于对应用计算机科学或计算机和软件的工作方式的强烈理解。<strong>许多应用计算机科学都是关于解决抽象层的问题，安全性通常是在这些抽象中找到有缺陷的假设……然后找出如何最好地修复（或利用）它们。</strong><br>我是通过从公立大学获得计算机科学工程学位来做到这一点的。对我来说，一些更有用的主题是操作系统，网络，计算机体系结构和编译器。除此之外，我也参加了我感兴趣的技术课程（例如数字信号处理，生物医学工程，人工智能），并通过学生俱乐部和实习中的项目工作探索了网络，隐私增强技术和（网络，客户端）应用安全方面的安全主题。<br>你还将从了解使用技术的人（用户，客户等）的工作方式中获益。如果我能回到我的大学时代，我会参加一些心理学，社会学和人文因素课程。<br>我与具有相似传统学术背景的专家（例如计算机工程，计算机科学，数学等学位）工作过。我也认识很多不太具有典型背景的人（例如化学，电影研究，心理学，平面设计）和一些在完成学位之前辍学的人。<br>关于安全认证的话题，我没有任何一个认证，我不认为我因此而被拒之门外。有些行业或国家可能会要求他们为信息安全专业人士提供服务，他们肯定是一些合理的人所追求的 - 告诫者！<br>在文化方面，我建议阅读<a href="https://en.wikipedia.org/wiki/Hacker_Manifesto" target="_blank" rel="noopener">黑客宣言</a>或<a href="https://translations.readthedocs.io/en/latest/" target="_blank" rel="noopener">如何成为一名黑客</a>，这对许多安全专家来说都是灵感和道德的指南针。 即使你不把自己比作黑客，理解和你一起工作的一些人的心态也是有帮助的。<br>除此之外，我所知道的大部分知识都是随着时间的推移，从朋友和同事的轶事，安全博客，会议论文和演示文稿，邮件列表，本地安全组和其他在线资源中学到的。我今天听到或摄取的很多东西都来自<a href="https://twitter.com/laparisa/lists/security" target="_blank" rel="noopener">我的Twitter安全列表</a>上的人。</p><h2 id="停止阅读，开始做。"><a href="#停止阅读，开始做。" class="headerlink" title="停止阅读，开始做。"></a>停止阅读，开始做。</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*Q7FRcfOGAAIJoADz0KvTIQ.gif" alt="标题图"><br>这适用于任何职业追求，但尽可能快地获得一些真实的工作经验。这是缩小你的兴趣，优势和未来发展领域的最佳方式。你还可以更好地了解正常工作日和环境的组成，包括你喜欢和不喜欢的内容。我生命中最有价值的职业相关经历之一是做了一个我讨厌的实习，因为它，所以我强烈地转向了另一个方向:)<br>在如何开始获得经验方面，我没有一个简单的答案。查看招聘会和会议，参与俱乐部或其他组织，以大胆的热情申请实习和兼职工作。在来谷歌之前，我在一个特许摊位清理干燥的nacho奶酪，这是我作为社区游泳池救生员定期轮班的一部分。这一点工作经验帮助我获得了大学宿舍管理员的工作，这在一家大型制药公司的IT实习面试时无疑是相关的。我在大学的俱乐部获得了一些“真实”（即非课程）软件体验，并且我在学校新闻组上发现了一个网络安全实习机会，这可能给了我足够的相关工作经验，让谷歌的某个人考虑为我安排一个面试。</p><h2 id="写代码。"><a href="#写代码。" class="headerlink" title="写代码。"></a>写代码。</h2><p>我认识的最好的安全工程师也在积极编写代码。这为他们提供了编写软件的第一手经验，包括无意中但不可避免地引入了安全漏洞。后者迫使所有开发者真正感同身受。毕竟，一直编写安全代码通常比指出不安全的代码更难。<br>如果你坚持从一个大型项目开始，请尝试修复开源项目中的错误。每个人都喜欢修复bug的人！该项目将感谢你，这通常是一种获得真实体验的好方法，也是你未来工作的好方法。</p><h2 id="破坏代码。"><a href="#破坏代码。" class="headerlink" title="破坏代码。"></a>破坏代码。</h2><p>花时间寻找软件bug。了解如何使用调试器，网络扫描程序，Web调试代理和软件模糊测试。花时间在黑客游乐场，可用于所有技能水平。我在大学时第一次使用<a href="https://www.hackthissite.org" target="_blank" rel="noopener">https://www.hackthissite.org</a> ，并在<a href="https://infosec.rocks" target="_blank" rel="noopener">https://infosec.rocks</a> 列出了其他一些自我指导的黑客培训网站。还有一个很好的黑客挑战、比赛列表（例如CTF），不想浪费时间的人可以点<a href="https://security.stackexchange.com/questions/3592/what-hacking-competitions-challenges-exist" target="_blank" rel="noopener">这里</a>。或者查找并报告你使用的实际软件中的bug。有<a href="https://www.bugcrowd.com/bug-bounty-list/" target="_blank" rel="noopener">许多软件供应商为安全漏洞提供现金奖励</a>，包括<a href="https://www.google.com/about/appsecurity/chrome-rewards/" target="_blank" rel="noopener">Chrome</a>和<a href="https://www.google.com/about/appsecurity/reward-program/" target="_blank" rel="noopener">Google</a>，以及<a href="https://www.hackerone.com/internet-bug-bounty" target="_blank" rel="noopener">Internet Bug Bounty</a>计划涵盖的一些核心开源项目。<br>除了自己找到错误之外，我还建议你继续学习并了解其他人的发现（<a href="https://seclists.org/bugtraq/" target="_blank" rel="noopener">bugtraq</a>，<a href="https://seclists.org/fulldisclosure/" target="_blank" rel="noopener">fulldisclosure</a>，<a href="https://seclists.org/oss-sec/" target="_blank" rel="noopener">oss-sec</a>）。</p><h2 id="分享知识。"><a href="#分享知识。" class="headerlink" title="分享知识。"></a>分享知识。</h2><p>我开始了解安全是从大学中由同龄人组织的一个名为<a href="https://www-s.acm.illinois.edu/mailman/listinfo/sigmil-l" target="_blank" rel="noopener">SigMil</a>的特别有趣的ACM小组中，成员们会对他们感兴趣的安全主题进行粗略的演示。我们还参加了一年一度的<a href="https://www.defcon.org/" target="_blank" rel="noopener">DEFCON</a>朝圣之旅，参加会谈（十年前要做的事情要容易得多），购买安全<a href="https://www.defcon.org/html/links/book-list.html" target="_blank" rel="noopener">书籍</a>或<a href="https://www.2600.com/" target="_blank" rel="noopener">杂志</a>，或者只是与来自世界其他地方的志同道合的人聊聊他们的工作。在Google，我直接从同行那里学到了很多东西，分享他们的专业知识，斗争和半生不熟的想法。<br>分享知识很重要，原因如下：</p><ol><li>分享知识是在大型组织或项目中扩展最佳安全实践（或避免陷阱）的必要且有效的方法。</li><li>我几乎总是在准备演示文稿或编写文档时自己学习一些东西，因此对于我来说，发现一个主题的隐藏角落是一个很好的强制功能。</li><li>我几乎总是从读者那里学到一些东西，无论是问题，评论还是后续讨论。</li><li>把爱传出去。</li></ol><h2 id="练习你的沟通。"><a href="#练习你的沟通。" class="headerlink" title="练习你的沟通。"></a>练习你的沟通。</h2><p>在安全方面工作意味着你需要定期向不同的受众解释复杂的技术问题，每个受众都有不同的词汇，专业知识和激励措施。在描述漏洞的严重性时，你很少会依赖通用指标，在推广最佳安全实践时也不会有任何闪亮的东西。面对<a href="https://zh.wikipedia.org/zh-cn/FUD" target="_blank" rel="noopener">FUD(即恐惧、不确定、怀疑)</a>，你必须让人们不受欢迎，然后专注于危机之外的行动。<br>所有这些都需要沟通艺术方面的技能，特别是解释和谈判。你不可能从纯粹的技术资源中掌握这门艺术，所以练习，发表，并永远致力于改进。</p><h2 id="期望努力工作，有时会失败。"><a href="#期望努力工作，有时会失败。" class="headerlink" title="期望努力工作，有时会失败。"></a>期望努力工作，有时会失败。</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*0iQlhQQUroM4_A1zAW6n3w.gif" alt="标题图"><br>也许这很明显，但值得明确表示。<br>安全是挑战性工作。你需要不断学习新事物，因为你需要保护的技术环境正在快速发展，这比我们弃用旧的，尚未完全安全的内容的能力要快得多。经常有时间和资源的威胁行动者也能很快适应现有的防御。<br>安全可能会有压力。你正在处理模棱两可的问题，不完善的解决方案，有限的数据以及对人类安全的真正威胁。<br>很难用安全性衡量成功，根据我的经验，人们更有可能注意到失败。 在确保现实世界技术的同时，我们最终还是在减轻风险的过程中，无论RSA供应商的某个人告诉你什么，都没有银弹。</p><h2 id="（尝试）保持乐观。"><a href="#（尝试）保持乐观。" class="headerlink" title="（尝试）保持乐观。"></a>（尝试）保持乐观。</h2><p>由于我刚才概述的一些原因，这个领域可能令人沮丧。跟上技术和开发的创新速度似乎是不可能的。 我的意思是，缓冲区溢出漏洞已存在数十年，但我们今天（2016）仍然经常看到利用它们的高影响漏洞。你会经常听到人们尖叫安全是不可能的，而且情况正在恶化，或者<a href="https://lcamtuf.blogspot.com/2010/05/security-engineering-broken-promises.html" target="_blank" rel="noopener">说出我们为什么都失败的完全雄辩点</a>。<br>现实可能是苛刻的，但如果我们专注于积极思考并考虑技术所提供的所有东西，那真是令人印象深刻！这不完美。它永远不会是完美的。但我认为当今安全的最前沿比10年前要好得多，我们可以通过一定程度的合理保证做一些相当令人印象深刻的事情，这让我感到乐观。</p><h2 id="请求帮忙。"><a href="#请求帮忙。" class="headerlink" title="请求帮忙。"></a>请求帮忙。</h2><p>如果你遇到混蛋，不要气馁。多年来，我在信息安全行业看到了大量的沙文主义和自我主义者。通过对话（在线，会议等等）快速变成谁是最精英的人并不罕见。<br>也许这不是每个人的经历，但我在很大程度上取得了成功，这得益于我现在认为是朋友的许多优秀安全人员的支持，建议，指导和帮助。仅仅因为你必须寻求帮助并不意味着你不会因为这项工作而被裁掉。<br>如果您需要帮助，请尽管问。<strong>只要确保你做尽职调查，尽可能让人们帮助你。</strong>大多数专家都非常忙碌，所以如果你问一个有足够背景和没有拼写错误的好问题，你就更有可能获得有用的回应。</p><h2 id="祝你好运并且快乐Hacking！"><a href="#祝你好运并且快乐Hacking！" class="headerlink" title="祝你好运并且快乐Hacking！"></a>祝你好运并且快乐Hacking！</h2><p>我偶然发现了一些其他安全职业建议的想法：</p><ul><li>Thomas Ptacek，Charlie Miller，Jeremiah Grossman，Richard Bejtlich和Bruce Schneier分享了他们的想法<a href="http://krebsonsecurity.com/tag/security-career-advice/" target="_blank" rel="noopener">http://krebsonsecurity.com/tag/security-career-advice/</a></li><li>我的朋友并且是Chrome同事Chris Palmer分享了可靠的建议<a href="https://noncombatant.org/2016/06/20/get-into-security-engineering" target="_blank" rel="noopener">https://noncombatant.org/2016/06/20/get-into-security-engineering</a></li><li>Michal Zalewski（又叫做lcamt​​uf）根据他在安全方面20年（令人敬畏的，经常是开创性的）的工作分享了4个简单的经验：<a href="https://lcamtuf.blogspot.com/2016/08/so-you-want-to-work-in-security-but-are.html" target="_blank" rel="noopener">https://lcamtuf.blogspot.com/2016/08/so-you-want-to-work-in-security-but-are.html</a></li></ul><h2 id="译者注"><a href="#译者注" class="headerlink" title="译者注"></a>译者注</h2><p>本文作者为<a href="https://en.wikipedia.org/wiki/Parisa_Tabriz" target="_blank" rel="noopener">Parisa Tabriz</a>，她是计算机安全专家，曾在谷歌担任工程总监。由于她在黑客和互联网安全方面的经验，她被称为谷歌的“安全公主”。2012年，“福布斯”杂志将她列入“30位30岁以下技术行业观察人员”名单。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文翻译自&lt;a href=&quot;https://medium.freecodecamp.org/so-you-want-to-work-in-security-bc6c10157d23&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://medium.freecodecamp.org/so-you-want-to-work-in-security-bc6c10157d23&lt;/a&gt; ，正文如下：&lt;/p&gt;
&lt;p&gt;每隔一段时间，我就会收到一封来自陌生人的电子邮件，询问有关如何从事安全行业（计算机，信息，网络等等）的建议。这很棒！我们需要更多充满激情，富有创造力和勤奋工作的人，他们希望努力使技术更安全。它也是一种非常经济稳定的谋生方式。关于这个确切的话题还有很多其他帖子，但我会根据自己的经验提出一些高层次的想法。&lt;br&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*Z7BjkasC8Kx5JtZ7N5Pe2A.gif&quot; alt=&quot;不像电影&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Translation" scheme="https://howiezhao.github.io/categories/Translation/"/>
    
    
  </entry>
  
  <entry>
    <title>《黑客军团》中使用的软件</title>
    <link href="https://howiezhao.github.io/2018/09/18/software-used-in-mr-robot/"/>
    <id>https://howiezhao.github.io/2018/09/18/software-used-in-mr-robot/</id>
    <published>2018-09-18T04:23:55.000Z</published>
    <updated>2018-09-18T14:42:19.862Z</updated>
    
    <content type="html"><![CDATA[<p>本文翻译自<a href="https://alternativeto.net/list/66/software-used-in-mr-robot" target="_blank" rel="noopener">https://alternativeto.net/list/66/software-used-in-mr-robot</a> ，正文如下：</p><p><img src="https://p0.ssl.qhimg.com/t01708531e12a86f171.jpg" alt="首页图片"><br>本文盘点了获得艾美奖和金球奖剧情/惊悚系列电视剧——《黑客军团》中黑客使用的软件。<br><strong>下面的列表包含到了第二季第11集！</strong><br><a id="more"></a></p><h2 id="Kali-Linux"><a href="#Kali-Linux" class="headerlink" title="Kali Linux"></a><a href="https://www.kali.org/" target="_blank" rel="noopener">Kali Linux</a></h2><p>Kali Linux是针对安全研究人员进行渗透测试的Linux发行版，但同时也被黑客使用，因为它集成了很多黑客工具。由于它是黑客的首选操作系统，所以它在《黑客军团》中经常有过出现。</p><h2 id="Wickr"><a href="#Wickr" class="headerlink" title="Wickr"></a><a href="https://wickr.com/" target="_blank" rel="noopener">Wickr</a></h2><p>Wickr是一个端到端的加密聊天应用程序，具有诸如消息可调到期时间等功能。在第二季中，fsociety组织使用它来保密通信。</p><h2 id="Tor-Browser"><a href="#Tor-Browser" class="headerlink" title="Tor Browser"></a><a href="https://www.torproject.org/projects/torbrowser.html" target="_blank" rel="noopener">Tor Browser</a></h2><p>Tor浏览器被广泛认为是最好的匿名工具。它将使你的互联网活动难以被追踪，当第二季第8集中fsociety的成员Trenton用Tor浏览器向Vimeo上传一个泄露的关于非法群体监视的FBI电话会议时，利用到了它。</p><h2 id="Raspberry-Pi"><a href="#Raspberry-Pi" class="headerlink" title="Raspberry Pi"></a><a href="https://www.raspberrypi.org/" target="_blank" rel="noopener">Raspberry Pi</a></h2><p>树莓派是一个小型的，可编程的计算机板，旨在教孩子们学习计算机科学。由于它的低成本，多功能性和简单性，它也是业余爱好者和程序员的最爱。第一季第5集中Elliot将一个树莓派安装到铁山的气候控制系统中，以便fsociety后期可以远程升高存储E公司磁带备份的存储空间的温度，从而实现美国消费者债务的很大一部分记录的备份被销毁。</p><h2 id="FileZilla"><a href="#FileZilla" class="headerlink" title="FileZilla"></a><a href="https://filezilla-project.org/" target="_blank" rel="noopener">FileZilla</a></h2><p>FileZilla是世界上最流行的FTP客户端，并且是最强大和用户友好的客户端之一。在第一季第4集中Trenton使用FileZilla上传一个漏洞利用程序到fsociety的FTP服务器上，即Elliot将安装在铁山的气候控制系统中的树莓派，以销毁美国消费者债务中很大一部分的记录。</p><h2 id="Pwnix"><a href="#Pwnix" class="headerlink" title="Pwnix"></a><a href="https://www.pwnieexpress.com/mobile-line-shift-to-aopp" target="_blank" rel="noopener">Pwnix</a></h2><p>Pwnix是一个为渗透测试人员定制的用于网络黑客和安全的Android ROM。Elliot在第二季第9集中使用了一个Pwnie Express Pwn Phone（Pwnix预装），以至于他和Darlene渗透进黑暗军团的电话。</p><h2 id="DeepSound"><a href="#DeepSound" class="headerlink" title="DeepSound"></a><a href="http://jpinsoft.net/deepsound" target="_blank" rel="noopener">DeepSound</a></h2><p>在第一季第8集中，Elliot使用DeepSound将文件隐藏在CD的常规音乐曲目中，以便隐藏文件只能使用DeepSound软件查看。这是一种被称为隐写术的技术。</p><h2 id="ProtonMail"><a href="#ProtonMail" class="headerlink" title="ProtonMail"></a><a href="https://protonmail.com/" target="_blank" rel="noopener">ProtonMail</a></h2><p>ProtonMail是一个安全的端到端加密电子邮件服务，基于瑞士，Elliot在第一季第8集中使用过。《黑客军团》背后的团队研究安全电子邮件服务的程度很深，以至于他们实际上联系了ProtonMail开发者，询问用户是否有可能在ProtonMail中监控他们自己的电子邮件活动。ProtonMail开发者非常喜欢帐户访问日志的想法，他们最终在ProtonMail的v2.0版本中实现了这个功能。想要了解更多请访问：<a href="https://protonmail.com/blog/protonmail-mr-robot-secure-email/" target="_blank" rel="noopener">https://protonmail.com/blog/protonmail-mr-robot-secure-email/</a></p><h2 id="HDShredder"><a href="#HDShredder" class="headerlink" title="HDShredder"></a><a href="https://www.miray-software.com/products/applications/hdshredder.html#" target="_blank" rel="noopener">HDShredder</a></h2><p>HDShredder 4企业版在第一季第10集中用于在E公司被黑之后安全地擦除所有fsociety的硬盘信息，然后他们在狗狗火葬场焚烧所有的硬盘。</p><h2 id="John-the-Ripper"><a href="#John-the-Ripper" class="headerlink" title="John the Ripper"></a><a href="https://www.openwall.com/john/" target="_blank" rel="noopener">John the Ripper</a></h2><p>John the Ripper是Kali Linux中包含的一个密码破解工具，用于检测简单的Unix密码，并试图通过每秒数千次的猜测来破解它们。这被称为暴力破解，Elliot在第一季第2集中通过使用它来破解E公司的临时首席技术官Tyrell Wellick的邮箱密码。</p><h2 id="Wegt"><a href="#Wegt" class="headerlink" title="Wegt"></a><a href="https://www.gnu.org/software/wget/" target="_blank" rel="noopener">Wegt</a></h2><p>Wget是一个命令行工具，可以发出HTTP(S)请求。在《黑客军团》中它被用于与John the Ripper结合使用Shellshock漏洞来攻击E公司的邮件服务器。</p><h2 id="Social-Engineer-Toolkit"><a href="#Social-Engineer-Toolkit" class="headerlink" title="Social-Engineer Toolkit"></a><a href="https://github.com/trustedsec/social-engineer-toolkit" target="_blank" rel="noopener">Social-Engineer Toolkit</a></h2><p>SET是一个专注于诸如网络钓鱼等社会工程攻击的测试框架。社会工程学欺骗受害者给予攻击者敏感信息。在第一季第5集中，Mobley使用SET的伪造短信功能让主管离开铁山，以便Elliot可以渗透进去。</p><h2 id="OpenWrt"><a href="#OpenWrt" class="headerlink" title="OpenWrt"></a><a href="https://openwrt.org/" target="_blank" rel="noopener">OpenWrt</a></h2><p>OpenWrt是Angela在第二季第6集中黑进FBI时使用的路由器固件。</p><h2 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a><a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="noopener">mimikatz</a></h2><p>mimikatz是一个后渗透工具，它将黑客可能需要执行的一些有用任务捆绑在一起。在第二季第6集中，它被装在USB橡皮鸭中并交给Angela，作为一个备份计划。</p><h2 id="btscanner"><a href="#btscanner" class="headerlink" title="btscanner"></a><a href="https://www.pentest.co.uk/downloads.html" target="_blank" rel="noopener">btscanner</a></h2><p>btscanner是一个包含在Kali Linux中的工具，它可以在无需配对的情况下提取关于蓝牙设备的尽可能多的信息。在第一季第6集中，Elliot使用btscanner与Bluesniff和Metasploit结合，通过MultiBlue蓝牙USB加密狗连接到附近警车中的电脑，并渗透进监狱的网络，以帮助一个名叫Vera的毒贩越狱。</p><h2 id="Bluesniff"><a href="#Bluesniff" class="headerlink" title="Bluesniff"></a><a href="http://bluesniff.shmoo.com/" target="_blank" rel="noopener">Bluesniff</a></h2><p>Bluesniff是一款蓝牙设备发现工具。在第一季第6集中，Elliot使用Bluesniff与Metasploit和btscanner结合，通过MultiBlue蓝牙USB加密狗连接到附近警车中的电脑，并渗透进监狱的网络，以帮助一个名叫Vera的毒贩越狱。</p><h2 id="KVM-Kernel-base-Virtual-Machine"><a href="#KVM-Kernel-base-Virtual-Machine" class="headerlink" title="KVM(Kernel-base Virtual Machine)"></a><a href="http://www.linux-kvm.org/page/Main_Page" target="_blank" rel="noopener">KVM(Kernel-base Virtual Machine)</a></h2><p>KVM是一个管理程序，它是一个可以通过虚拟机运行其他操作系统的软件。Elliot使用KVM在Kali Linux内虚拟化Windows 7。在第一季第8集中，它使用KVM运行DeepSound。</p><h2 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a><a href="https://metasploit.com/" target="_blank" rel="noopener">Metasploit</a></h2><p>Metasploit框架是Kali Linux中包含的一个软件，可以使渗透测试人员更容易发现网络中的漏洞。Meterpreter是可以在Metasploit框架中运行的数百个Payload之一，并且在第一季第6集中使用到。在第一季第6集中，Elliot使用Metasploit Framwork和Metapreter与btscanner和Bluesniff结合，通过MultiBlue蓝牙USB加密狗连接到附近警车中的电脑，并渗透进监狱的网络，以帮助一个名叫Vera的毒贩越狱。</p><h2 id="Framaroot"><a href="#Framaroot" class="headerlink" title="Framaroot"></a><a href="https://forum.xda-developers.com/apps/framaroot/root-framaroot-one-click-apk-to-root-t2130276" target="_blank" rel="noopener">Framaroot</a></h2><p>在电视中称为RooterFrame的Framaroot，在第一季第3集中被Tyrell Wellick用来Root同事的Android手机，这样他就可以隐藏在手机上安装的FlexiSPY间谍软件，以便获得关于谁将成为E公司的下一任首席技术官的秘密信息。</p><h2 id="Kingo-Root"><a href="#Kingo-Root" class="headerlink" title="Kingo Root"></a><a href="https://zh.kingoapp.com/" target="_blank" rel="noopener">Kingo Root</a></h2><p>Tyrell Wellick在第一季第3集中使用Kingo Root来Root同事的Android手机，这样他就可以在手机上隐蔽地安装FlexiSPY间谍软件，以便获得有关谁将成为下一任E公司首席执行官的秘密信息。</p><h2 id="FlexiSPY"><a href="#FlexiSPY" class="headerlink" title="FlexiSPY"></a><a href="https://www.flexispy.com/zh/" target="_blank" rel="noopener">FlexiSPY</a></h2><p>FlexiSPY是针对Android，iOS和BlackBerry的间谍软件，允许用户监控受害者手机上的所有活动。在第一季第3集中，Tyrell Wellick秘密地将其安装在同事的Android手机上，以获取有关谁将成为下一任E公司首席技术官的秘密信息。</p><h2 id="SuperSU"><a href="#SuperSU" class="headerlink" title="SuperSU"></a><a href="http://www.supersu.com/" target="_blank" rel="noopener">SuperSU</a></h2><p>SuperSU是一个在已Root的Android手机上管理超级用户权限的应用程序。在第一季第3集中，Tyrell Wellick在同事的Android手机上秘密安装了FlexiSPY —— 它使用SuperSU为它自己提供超级用户访问 —— 以便获得有关谁将成为下一任E公司首席技术官的秘密信息。</p><h2 id="can-utils"><a href="#can-utils" class="headerlink" title="can-utils"></a><a href="https://packages.debian.org/sid/can-utils" target="_blank" rel="noopener">can-utils</a></h2><p>can-utils包含与汽车电脑有关的实用程序。其中一个工具被称为candump，它在《黑客军团》中被用于入侵汽车的电脑。</p><h2 id="radare"><a href="#radare" class="headerlink" title="radare"></a><a href="https://www.radare.org/r/" target="_blank" rel="noopener">radare</a></h2><p>radare2是Tyrell Wellick在第二季第12集中使用的逆向工程框架。</p><h2 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">PyCharm</a></h2><p>PyCharm是一个Python和Django的IDE（集成开发环境），它是一种代码编辑软件。Trenton在第一季第四集中使用它。</p><h2 id="Tor"><a href="#Tor" class="headerlink" title="Tor"></a><a href="https://www.torproject.org/" target="_blank" rel="noopener">Tor</a></h2><p>Tor被广泛认为是最好的匿名工具。它将使你的互联网活动难以被追踪，这个版本 —— 不像Tor浏览器 —— 可以用来托管隐藏服务，这是只能通过Tor访问的站点，并且其物理服务器位置被Tor匿名网络隐藏。Ray通过Tor隐藏服务运行着一条“丝绸之路”，他希望Elliot在第二季第5集中进行网站迁移。</p><h2 id="PuTTY"><a href="#PuTTY" class="headerlink" title="PuTTY"></a><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/" target="_blank" rel="noopener">PuTTY</a></h2><p>PuTTY是用于连接到Linux服务器的客户端。Elliot在第二季第4集和第5集使用PuTTY连接到运行Kali Linux的VPS（虚拟专用服务器），以便他可以在Ray的计算机上使用安装在VPS上的IRC客户端与Darlene聊天。他还在第二季第5集中使用PuTTY，完成了Ray的“丝绸之路”网站的迁移。</p><h2 id="Mozilla-Firefox"><a href="#Mozilla-Firefox" class="headerlink" title="Mozilla Firefox"></a><a href="https://www.mozilla.org/zh-CN/firefox/" target="_blank" rel="noopener">Mozilla Firefox</a></h2><p>Elliot使用Firefox作为他的默认浏览器。Trenton在第二季第8集中使用了Firefox。</p><h2 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a><a href="https://ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a></h2><p>在第二季第8集中Trenton使用FFmpeg编码一个视频，其中包含一个泄露的关于进行非法大规模监视的FBI电话会议，并通过Tor浏览器向Vimeo上传。</p><h2 id="Slackware"><a href="#Slackware" class="headerlink" title="Slackware"></a><a href="http://www.slackware.com/" target="_blank" rel="noopener">Slackware</a></h2><p>Slackware是1993年创建的一个Linux发行版，旨在提高设计的稳定性和简单性，并成为最“类Unix”的Linux发行版。Slackware最初是基于Softlanding Linux系统的，它已经成为许多其他Linux发行版的基础，尤其是SUSE Linux发行版的第一个版本，也是最早的发行版本。在第二季第10集中，当Elliot与黑暗军队达成拯救Darlene生命的交易时，Leon给了他一台安装有Slackware的笔记本电脑，用于将黑暗军队的项目移动到刚果。</p><h2 id="VLC-Media-Player"><a href="#VLC-Media-Player" class="headerlink" title="VLC Media Player"></a><a href="https://www.videolan.org/vlc/" target="_blank" rel="noopener">VLC Media Player</a></h2><p>VLC媒体播放器被用于第二季第4集，当时Elliot和Darlene一起观看了虚假恐怖片《Careful Massacre of the Bourgeoisie》的VHS版本。VLC也被用于第二季第8集，当fsociety预览一个他们将上传的关于非法大规模监视的泄露的FBI电话会议视频时。</p><h2 id="Wayback-Machine"><a href="#Wayback-Machine" class="headerlink" title="Wayback Machine"></a><a href="http://web.archive.org/" target="_blank" rel="noopener">Wayback Machine</a></h2><p>由Internet Archive运营的Waybach Machine是一个包含超过4,900亿个网页副本的数据库。在第二季第8集中FBI特工Dominique DiPierro向Mobley透露，联邦调查局使用了Wayback Machine，以便将他的黑客把柄与他为DJ Mobley创建的旧的粉丝页面联系起来。</p><h2 id="µTorrent"><a href="#µTorrent" class="headerlink" title="µTorrent"></a><a href="https://www.utorrent.com/intl/zh_cn/utweb-index" target="_blank" rel="noopener">µTorrent</a></h2><p>第二季第4集达琳用μTorrent下载了虚假恐怖电影《Careful Massacre of the Bourgeoisie》的VHS版本。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文翻译自&lt;a href=&quot;https://alternativeto.net/list/66/software-used-in-mr-robot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://alternativeto.net/list/66/software-used-in-mr-robot&lt;/a&gt; ，正文如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p0.ssl.qhimg.com/t01708531e12a86f171.jpg&quot; alt=&quot;首页图片&quot;&gt;&lt;br&gt;本文盘点了获得艾美奖和金球奖剧情/惊悚系列电视剧——《黑客军团》中黑客使用的软件。&lt;br&gt;&lt;strong&gt;下面的列表包含到了第二季第11集！&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Translation" scheme="https://howiezhao.github.io/categories/Translation/"/>
    
    
  </entry>
  
  <entry>
    <title>谈谈Android的root</title>
    <link href="https://howiezhao.github.io/2018/09/18/android-root/"/>
    <id>https://howiezhao.github.io/2018/09/18/android-root/</id>
    <published>2018-09-18T04:13:24.000Z</published>
    <updated>2018-09-18T04:14:53.718Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="CheatSheet" scheme="https://howiezhao.github.io/categories/CheatSheet/"/>
    
    
      <category term="Android" scheme="https://howiezhao.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>tmux小记</title>
    <link href="https://howiezhao.github.io/2018/09/18/tmux/"/>
    <id>https://howiezhao.github.io/2018/09/18/tmux/</id>
    <published>2018-09-18T04:10:07.000Z</published>
    <updated>2018-09-18T04:11:42.544Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="CheatSheet" scheme="https://howiezhao.github.io/categories/CheatSheet/"/>
    
    
      <category term="Linux" scheme="https://howiezhao.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Vim小记</title>
    <link href="https://howiezhao.github.io/2018/09/18/vim/"/>
    <id>https://howiezhao.github.io/2018/09/18/vim/</id>
    <published>2018-09-18T04:09:54.000Z</published>
    <updated>2018-09-18T04:11:00.476Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="CheatSheet" scheme="https://howiezhao.github.io/categories/CheatSheet/"/>
    
    
      <category term="Linux" scheme="https://howiezhao.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>使用Zsh替代Bash</title>
    <link href="https://howiezhao.github.io/2018/09/18/zsh/"/>
    <id>https://howiezhao.github.io/2018/09/18/zsh/</id>
    <published>2018-09-18T04:09:36.000Z</published>
    <updated>2018-09-28T04:52:18.083Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，Bash几乎是所有Linux发行版预装的Shell，但Zsh却能带给你更强大的功能。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Zsh的安装很简单，在Ubuntu中，只需要<code>apt install zsh</code>一条命令即可，启用也很简单，<code>chsh -s $(which zsh)</code>即可，但它的配置却相当复杂，由此诞生了<a href="https://ohmyz.sh/" target="_blank" rel="noopener">Oh My Zsh</a>项目，该项目的主要目的是简化Zsh的配置。<br>Oh My Zsh的官网给出了利用<code>curl</code>或<code>wget</code>安装的详细命令，具体如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Oh My Zsh前需要安装git</span></span><br><span class="line"><span class="comment"># 通过curl安装</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br><span class="line"><span class="comment"># 通过wget安装</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure></p><p>安装完成后，会在当前用户的家目录下生成多个隐藏文件：<br>其中<code>.zshrc</code>类似于<code>.bashrc</code>，存放zsh的配置信息；<br><code>.zsh_history</code>类似于<code>.bash_history</code>，存放zsh的命令历史记录；<br><code>.oh-my-zsh</code>的文件夹则是Oh My Zsh项目GitHub仓库的克隆版，其中的<code>themes</code>文件夹下主要存放自带的主题，<code>plugins</code>文件夹下主要存放自带的插件，<code>custom</code>文件夹下主要存放用户自己下载的主题和插件。<br><a id="more"></a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Oh My Zsh的主要配置都位于<code>$HOME/.zshrc</code>文件中，主要配置如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置主题，默认为自带的robbyrussell主题，</span></span><br><span class="line"><span class="comment"># 个人喜欢自带的ys主题</span></span><br><span class="line">ZSH_THEME=<span class="string">"ys"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动错误命令自动更正，默认是注释的</span></span><br><span class="line">ENABLE_CORRECTION=<span class="string">"true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在命令执行的过程中，使用小红点进行提示</span></span><br><span class="line"><span class="comment"># 默认是注释的</span></span><br><span class="line">COMPLETION_WAITING_DOTS=<span class="string">"true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置插件，默认只启用了自带的git插件,</span></span><br><span class="line"><span class="comment"># 要启用更多的插件可直接在括号中写入，</span></span><br><span class="line"><span class="comment"># 必须是自带的插件或已下载到指定位置的插件</span></span><br><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>Zsh的强大之处就在于它有相当多的插件，只需安装相关插件，并进行配置，即可体验相应功能。Oh My Zsh安装并启用插件相当简便，所以，可把Oh My Zsh当成是一个Zsh的插件管理器。个人常用的插件如下：</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>Oh My Zsh自带的插件，用于显示Git仓库的分支等信息。</p><h3 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h3><p>Oh My Zsh自带的插件，实现快速跳转到指定文件夹，前提是要安装autojump命令行工具，<code>apt install autojump</code>即可。</p><h3 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a><a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener">zsh-autosuggestions</a></h3><p>Zsh下的命令自动建议插件，使用如下命令即可安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure></p><h3 id="zsh-completions"><a href="#zsh-completions" class="headerlink" title="zsh-completions"></a><a href="https://github.com/zsh-users/zsh-completions" target="_blank" rel="noopener">zsh-completions</a></h3><p>Zsh下的命令自动补全插件，使用如下命令即可安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-completions ~/.oh-my-zsh/custom/plugins/zsh-completions</span><br></pre></td></tr></table></figure></p><h3 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a><a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="noopener">zsh-syntax-highlighting</a></h3><p>Zsh下的命令语法高亮插件，使用如下命令即可安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></p><p>当安装并启用以上的所有插件后，<code>$HOME/.zshrc</code>文件中插件相关配置应该是下面这样的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  autojump</span><br><span class="line">  zsh-autosuggestions</span><br><span class="line">  zsh-completions</span><br><span class="line">  zsh-syntax-highlighting</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br><span class="line"><span class="built_in">source</span> ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br><span class="line"><span class="comment"># 值得注意的是，根据官方文档，zsh-syntax-highlighting插件需放在最后，</span></span><br><span class="line"><span class="comment"># 并且要加上相应的source语句</span></span><br></pre></td></tr></table></figure></p><h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>Oh My Zsh自带了很多主题，<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="noopener">在这里</a>可以查看每个主题的显示效果，可根据自己的喜好选择合适的主题，值得注意的是，当在<code>$HOME/.zshrc</code>配置文件中将主题设置为<code>random</code>时，它每次会选择随机的主题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，Bash几乎是所有Linux发行版预装的Shell，但Zsh却能带给你更强大的功能。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;Zsh的安装很简单，在Ubuntu中，只需要&lt;code&gt;apt install zsh&lt;/code&gt;一条命令即可，启用也很简单，&lt;code&gt;chsh -s $(which zsh)&lt;/code&gt;即可，但它的配置却相当复杂，由此诞生了&lt;a href=&quot;https://ohmyz.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Oh My Zsh&lt;/a&gt;项目，该项目的主要目的是简化Zsh的配置。&lt;br&gt;Oh My Zsh的官网给出了利用&lt;code&gt;curl&lt;/code&gt;或&lt;code&gt;wget&lt;/code&gt;安装的详细命令，具体如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装Oh My Zsh前需要安装git&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 通过curl安装&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sh -c &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 通过wget安装&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sh -c &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装完成后，会在当前用户的家目录下生成多个隐藏文件：&lt;br&gt;其中&lt;code&gt;.zshrc&lt;/code&gt;类似于&lt;code&gt;.bashrc&lt;/code&gt;，存放zsh的配置信息；&lt;br&gt;&lt;code&gt;.zsh_history&lt;/code&gt;类似于&lt;code&gt;.bash_history&lt;/code&gt;，存放zsh的命令历史记录；&lt;br&gt;&lt;code&gt;.oh-my-zsh&lt;/code&gt;的文件夹则是Oh My Zsh项目GitHub仓库的克隆版，其中的&lt;code&gt;themes&lt;/code&gt;文件夹下主要存放自带的主题，&lt;code&gt;plugins&lt;/code&gt;文件夹下主要存放自带的插件，&lt;code&gt;custom&lt;/code&gt;文件夹下主要存放用户自己下载的主题和插件。&lt;br&gt;
    
    </summary>
    
      <category term="CheatSheet" scheme="https://howiezhao.github.io/categories/CheatSheet/"/>
    
    
      <category term="Linux" scheme="https://howiezhao.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
